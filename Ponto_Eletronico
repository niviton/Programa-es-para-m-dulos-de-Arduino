#include <WiFi.h>
#include <HTTPSRedirect.h>
#include <Adafruit_Fingerprint.h>
#include <EEPROM.h>

// ==============================================
// CONFIGURA√á√ïES DE HARDWARE
// ==============================================
#define BUTTON_PIN 15
#define MAX_USERS 20
#define NAME_LENGTH 20

HardwareSerial mySerial(2);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// ==============================================
// CONFIGURA√á√ïES DE REDE
// ==============================================
const char* ssid = "VIVIANE";
const char* password = "bitinha123";

// ==============================================
// CONFIGURA√á√ïES GOOGLE SHEETS
// ==============================================
const char* hostName = "script.google.com";
const int httpsPort = 443;
const char* url = "/macros/s/AKfycbxuhACjQ2s2az-jHWlLf5pQnwRnDxxb8jvETqV2ZvA5170tXaoAH3l3tfii3XCEwCCf/exec";

HTTPSRedirect client(httpsPort);
int nextID = 1;

// ==============================================
// PROT√ìTIPOS DE FUN√á√ÉO
// ==============================================
void conectarWiFi();
void enviarRegistro(int id, const String &nome, const String &acao);
void salvarNome(int id, String nome);
String getName(int id);
void salvarUltimoID(int id);
void carregarUltimoID();
bool getLastAction(int id);
void saveLastAction(int id, bool action);
uint8_t getFingerprintEnroll(int id);
int getFingerprintID();
void cadastrarDigital();
void apagarTodosOsAcessos();
void listarAcessos();
void removerAcesso(int id);

// ==============================================
// SETUP INICIAL
// ==============================================
void setup() {
  Serial.begin(115200);
  mySerial.begin(57600, SERIAL_8N1, 16, 17);
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
  EEPROM.begin(512);

  Serial.println("Iniciando sensor biom√©trico...");
  if (finger.verifyPassword()) {
    Serial.println("‚úÖ Sensor encontrado!");
  } else {
    Serial.println("‚ö†Ô∏è ERRO: Sensor N√ÉO encontrado!");
    while (1);
  }
  
  conectarWiFi();
  
  // Configura o cliente HTTPS
  client.setInsecure();
  client.setPrintResponseBody(true);

  carregarUltimoID();
}

// ==============================================
// LOOP PRINCIPAL
// ==============================================
void loop() {
  // Verificar cadastro via bot√£o
  if (digitalRead(BUTTON_PIN) == HIGH) {
    delay(100);
    cadastrarDigital();
  }

  // Reconhecer digital e enviar registro para a planilha
  int id = getFingerprintID();
  if (id > 0) {
    String nome = getName(id);
    bool lastAction = getLastAction(id);
    String acao = lastAction ? "SAIDA" : "ENTRADA";
    
    Serial.printf("[%s] %s - %s\n", acao.c_str(), nome.c_str(), String(millis()).c_str());
    
    enviarRegistro(id, nome, acao);
    saveLastAction(id, !lastAction);
  }

  // Verificar comandos via Serial
  if (Serial.available()) {
    String comando = Serial.readStringUntil('\n');
    comando.trim();
    
    if (comando.equalsIgnoreCase("apagar")) {
      apagarTodosOsAcessos();
    } else if (comando.equalsIgnoreCase("banco de dados")) {
      listarAcessos();
    } else if (comando.startsWith("apagar id")) {
      String idStr = comando.substring(9);
      idStr.trim();
      int idCmd = idStr.toInt();
      if (idCmd > 0 && idCmd <= MAX_USERS) {
        removerAcesso(idCmd);
      } else {
        Serial.println("‚ö†Ô∏è ID inv√°lido! Digite um n√∫mero v√°lido.");
      }
    }
  }
  
  delay(2000);
}

// ==============================================
// FUN√á√ïES DE CONEX√ÉO WiFi
// ==============================================
void conectarWiFi() {
  Serial.print("Conectando ao WiFi...");
  WiFi.begin(ssid, password);
  int count = 0;
  while (WiFi.status() != WL_CONNECTED && count < 20) {
    delay(500);
    Serial.print(".");
    count++;
  }
  if(WiFi.status() == WL_CONNECTED){
    Serial.println("\nWiFi conectado! IP: " + WiFi.localIP().toString());
  } else {
    Serial.println("\nFalha na conex√£o WiFi!");
  }
}

// ==============================================
// COMUNICA√á√ÉO COM GOOGLE SHEETS
// ==============================================
void enviarRegistro(int id, const String &nome, const String &acao) {
  if (client.connect(hostName, httpsPort)) {
    String payload = String(url) + "?id=" + String(id) + "&nome=" + nome + "&acao=" + acao;
    client.GET(payload, hostName);
    client.stop();
    Serial.println("Registro enviado para a planilha.");
  } else {
    Serial.println("Erro ao conectar com o servidor da planilha.");
  }
}

// ==============================================
// FUN√á√ïES DE CADASTRO DE DIGITAIS
// ==============================================
void cadastrarDigital() {
  if (nextID > MAX_USERS) {
    nextID = 1;
  }
  
  Serial.print("üìå Cadastrando nova digital. ID: ");
  Serial.println(nextID);
  
  uint8_t resultado = getFingerprintEnroll(nextID);
  if (resultado != FINGERPRINT_OK) {
    Serial.println("‚ùå Falha no cadastro da digital. Tente novamente.");
    return;
  }
  
  Serial.println("Digite o nome do usu√°rio:");
  while (Serial.available() == 0);
  String nome = Serial.readStringUntil('\n');
  nome.trim();
  
  if (nome.length() == 0) {
    nome = "Usuario" + String(nextID);
  }
  
  salvarNome(nextID, nome);
  salvarUltimoID(nextID);
  
  Serial.println("‚úÖ Cadastro conclu√≠do!");
  nextID++;
}

int getFingerprintID() {
  int p = finger.getImage();
  if (p != FINGERPRINT_OK) return -1;
  
  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return -1;
  
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    return finger.fingerID;
  } else {
    return -1;
  }
}

uint8_t getFingerprintEnroll(int id) {
  int p = -1;
  Serial.println("üëâ Coloque o dedo no sensor...");
  
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) {
      Serial.print(".");
    } else if (p != FINGERPRINT_OK) {
      Serial.println("\n‚ö†Ô∏è Erro ao capturar imagem.");
      return p;
    }
  }
  Serial.println("\nüì∏ Imagem capturada!");
  
  p = finger.image2Tz(1);
  if (p != FINGERPRINT_OK) return p;
  
  Serial.println("‚úã Remova o dedo...");
  delay(2000);
  while (finger.getImage() != FINGERPRINT_NOFINGER);
  
  Serial.println("üëâ Coloque o mesmo dedo novamente...");
  while (finger.getImage() != FINGERPRINT_OK);
  
  p = finger.image2Tz(2);
  if (p != FINGERPRINT_OK) return p;
  
  Serial.println("üîÑ Criando modelo...");
  p = finger.createModel();
  if (p != FINGERPRINT_OK) return p;
  
  Serial.println("üíæ Armazenando digital...");
  p = finger.storeModel(id);
  return p;
}

// ==============================================
// FUN√á√ïES DE MANIPULA√á√ÉO DA EEPROM
// ==============================================
void salvarNome(int id, String nome) {
  int addr = id * NAME_LENGTH;
  for (int i = 0; i < NAME_LENGTH; i++) {
    EEPROM.write(addr + i, (i < nome.length()) ? nome[i] : 0);
  }
  EEPROM.commit();
}

String getName(int id) {
  int addr = id * NAME_LENGTH;
  char buffer[NAME_LENGTH];
  for (int i = 0; i < NAME_LENGTH; i++) {
    buffer[i] = EEPROM.read(addr + i);
  }
  return String(buffer);
}

void salvarUltimoID(int id) {
  EEPROM.write(500, id);
  EEPROM.commit();
}

void carregarUltimoID() {
  nextID = EEPROM.read(500);
  if (nextID == 255 || nextID == 0 || nextID > MAX_USERS) {
    nextID = 1;
  }
}

bool getLastAction(int id) {
  int addr = 400 + (id / 8);
  return bitRead(EEPROM.read(addr), id % 8);
}

void saveLastAction(int id, bool action) {
  int addr = 400 + (id / 8);
  byte value = EEPROM.read(addr);
  bitWrite(value, id % 8, action);
  EEPROM.write(addr, value);
  EEPROM.commit();
}

// ==============================================
// FUN√á√ïES DE COMANDOS VIA SERIAL
// ==============================================
void apagarTodosOsAcessos() {
  Serial.println("‚ö†Ô∏è Apagando todos os acessos...");
  
  for (int i = 1; i <= MAX_USERS; i++) {
    finger.deleteModel(i);
    salvarNome(i, "");
  }
  
  salvarUltimoID(1);
  Serial.println("‚úÖ Todos os acessos foram apagados!");
}

void listarAcessos() {
  Serial.println("üìú Banco de dados:");
  for (int i = 1; i <= MAX_USERS; i++) {
    String nome = getName(i);
    if (nome.length() > 0) {
      Serial.print("ID: ");
      Serial.print(i);
      Serial.print(" - Nome: ");
      Serial.println(nome);
    }
  }
}

void removerAcesso(int id) {
  Serial.print("üóëÔ∏è Removendo ID: ");
  Serial.println(id);
  
  if (finger.deleteModel(id) == FINGERPRINT_OK) {
    Serial.println("‚úÖ Acesso removido.");
    salvarNome(id, "");
  } else {
    Serial.println("‚ö†Ô∏è Erro ao remover.");
  }
}
